data Color = R | G | B;
data Direction = N | E | S | W;

define prod : Bool * Color * Direction = (True, G, S);
define amp  : Bool & Color & Direction = <True, G, S>;

define use_prod : Bool * Color * Direction -> Direction =
  \ p : Bool * Color * Direction. let (x, y, z) = p in z;

define use_amp  : Bool & Color & Direction -> Direction =
  \ a : Bool & Color & Direction. a.3;
  
{- define use_amp_error  : Bool & Color & Direction -> Direction =
  \ a : Bool & Color & Direction. (a.1, a.2, a.3); -}

use_amp amp;