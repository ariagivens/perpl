data Nat = zero | succ Nat;

define not : Bool -> Bool =
  \ b : Bool. if b then False else True;
define and : Bool -> Bool -> Bool =
  \ a : Bool. \ b : Bool. if a then b else False;

define even : Nat -> Bool =
  \ n : Nat. case n of zero -> True | succ n' -> not (even n');

define iszero : Nat -> Bool =
  \ n : Nat. case n of zero -> True | succ n' -> False;

--define bothzero_worse : Nat -> Nat -> Bool =
--  \ m : Nat. \ n : Nat. case m of
--    | zero -> iszero n
--    | succ m' -> False;

define bothzero_better : Nat -> Nat -> Bool =
  \ m : Nat. \ n : Nat. let iszero_n = iszero n in
    case m of
      | zero -> iszero_n
      | succ m' -> False;

define dont_defun_nat : Nat -> Nat = \ n : Nat. succ n;

bothzero_better zero (succ zero);