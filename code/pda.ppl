data Bool = F | T;
data WSymbol = WSym0 | WSym1;
data ZSymbol = ZSym0 | ZSym1;
data State = q1 | q2 | q3;
data String = WNil | WCons WSymbol String;
data Stack = ZNil | ZCons ZSymbol Stack;
data Action = Pop State | Push State ZSymbol;

data SymbolxState = Pair WSymbol State;

extern transition : State -> SymbolxState;
extern transition' : State -> WSymbol -> ZSymbol -> Action;
extern in_accept : State -> Bool;
extern in_accept' : State -> Bool;
extern q0 : State;
extern q0' : State;
extern z0 : ZSymbol;

define gen_fa : State -> String = \ q : State. case in_accept q of
  | T -> WNil
  | F -> (case transition q of Pair w r -> WCons w (gen_fa r));

define rec_pda : State -> String -> Stack -> Bool =
  \ q' : State. \ ws : String. \ zs : Stack. case ws of
    | WNil -> in_accept' q'
    | WCons w ws -> (case zs of
      | ZNil -> F
      | ZCons z zs -> (case transition' q' w z of
        | Pop r' -> rec_pda r' ws zs
        | Push r' znew -> rec_pda r' ws (ZCons znew (ZCons z zs))
      )
    );

rec_pda q0' (gen_fa q0) (ZCons z0 ZNil);